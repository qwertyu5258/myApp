{"version":3,"sources":["Test.js","resultModal/ResultModal.js","App.js","serviceWorker.js","index.js"],"names":["Test","Component","props","handleClose","setState","show","openModal","num","number","state","Button","variant","onClick","this","Modal","onHide","animation","Header","closeButton","Title","Body","Footer","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6e1c8a76.chunk.js","sourcesContent":["import './App.css';\r\nimport { Button, Modal } from 'react-bootstrap';\r\nimport React, { Component } from 'react';\r\nimport ResultModal from './resultModal/ResultModal'\r\n\r\n\r\n\r\n\r\nclass Test extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            show: false,\r\n            number: '',\r\n        }\r\n    }\r\n\r\n    handleClose = () => {\r\n        this.setState({\r\n            show: false,\r\n        });\r\n    }\r\n\r\n    openModal = (num) => {\r\n        this.setState({\r\n            show: true,\r\n            number: num,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div>재미로 해보는 심리테스트</div>\r\n                <br></br>\r\n                <div>당신이 데려가고 싶은 동물은?</div>\r\n                <br></br>\r\n                <Button variant=\"info\"\r\n                onClick={ () => this.openModal('1')}>사자</Button>{'  '}\r\n                <Button variant=\"info\" onClick={ () => this.openModal('2')}>말</Button>{'   '}\r\n                <Button variant=\"info\" onClick={ () => this.openModal('3')}>소</Button>{'   '}\r\n                <Button variant=\"info\" onClick={ () => this.openModal('4')}>양</Button>{'   '}\r\n                <Button variant=\"info\" onClick={ () => this.openModal('5')}>원숭이</Button>{'   '}\r\n                <br></br>\r\n                {this.state.number === '1' && (\r\n                <Modal show={this.state.show} onHide={this.handleClose} animation={false}>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>사자'를 선택한 당신은?!</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>사자를 선택한 당신은 자존심이 매우 강한 성격이군요! 다른 사람이 자신을 무시하는 태도를 보이면 화를 참을 수 없고, 다른 사람과 비교를 당하면 쉽게 상처를 받기도 하는 당신. 누군가 당신의 행동을 지적하는 것 같으면 위축되기도 하는데요, 자존심에 상처가 생기는 일과 마주했다면 잠시 분위기를 바꿔보세요. 심리적 안정에 도움이 될 거예요~! ^^\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"secondary\" onClick={this.handleClose}>\r\n                            Close\r\n                        </Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n                )}\r\n                {this.state.number === '2' && (\r\n                <Modal show={this.state.show} onHide={this.handleClose} animation={false}>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>'말'을 선택한 당신은?!</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>말을 선택한 당신은 다람쥐 쳇바퀴 돌아가듯 매일 똑같은 일상에 지루함을 느끼고 있네요. 남들과 똑같은 일상에 염증을 느끼시나요? 늘 반복되는 하루에 지쳤다면 당신이 집중할 수 있고 즐길 수 있는 일을 찾아보세요. 스트레스 지수가 최고치에 다다랐다면 스트레스를 해소할만한 관심거리나 취미 등을 적극적으로 찾아보는 것도 좋아요. ^^\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"secondary\" onClick={this.handleClose}>\r\n                            Close\r\n                        </Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n                )}\r\n                {this.state.number === '3' && (\r\n                <Modal show={this.state.show} onHide={this.handleClose} animation={false}>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>'소'를 선택한 당신은?!</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>소를 선택한 당신은 일과 성공에 대한 스트레스와 부담이 많네요. 만약 당신이 학생이라면 공부와 미래에 대한 걱정과 고민이 많고, 직장인이라면 직업과 연봉에 관한 고민이 많아요. 또, 당신이 가정주부라면 집안일과 육아를 완벽하게 해내기 위한 스트레스가 큰데요, 하지만 우리는 슈퍼맨 · 슈퍼우먼이 아니잖아요? 모든 일에 완벽해야 할 필요는 없답니다. 지금 당신을 짓누르고 있는 그 중압감과 불안감에서 벗어나야 해요. 지금 당신에게 필요한 건 다른 무엇도 아닌 휴식이랍니다.\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"secondary\" onClick={this.handleClose}>\r\n                            Close\r\n                        </Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n                )}\r\n                {this.state.number === '4' && (\r\n                <Modal show={this.state.show} onHide={this.handleClose} animation={false}>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>'양'을 선택한 당신은?!</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>양을 선택한 당신은 사랑하는 사람과의 연애에서 오는 스트레스가 있네요. 인생의 대부분을 나와는 다른 환경에서 살아온 연인의 행동과 가치관, 생활 방식 등이 많이 다르다는 것을 알지만 상대방의 행동이 이해되지 않는 상황들이 많을 거예요. 이러한 상황이 생길 때마다 밤새 고민하고 스트레스를 받는다면 당신의 정신 건강은 물론 신체 건강까지 해를 끼칠 수 있답니다. 만약 당신이 솔로라면 빨리 누군가를 만나 연애를 해야 한다는 강박관념을 버리세요. 편안한 마음으로 현재의 일상에 충실한다면 머지않아 당신 곁에 소중한 인연이 꼭 나타날 거예요~! ^^ \r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"secondary\" onClick={this.handleClose}>\r\n                            Close\r\n                        </Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n                )}\r\n                {this.state.number === '5' && (\r\n                <Modal show={this.state.show} onHide={this.handleClose} animation={false}>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>'원숭이'를 선택한 당신은?!</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>원숭이를 선택한 당신은 사람들과의 관계로부터 오는 스트레스가 가장 크네요. 겉과 속이 다른 사람, 항상 무언가를 요구하기만 하는 사람, 자기주장만 내세우는 사람, 생각 없이 나오는 대로 막말을 일삼는 사람 등 아무리 이해하려 애써봐도 이해할 수 없는 사람들이 많은데요, 무조건 참거나 상대하지 않는 게 최선의 방법은 아니랍니다. 더 큰 오해가 쌓이기 전에 마음을 터놓고 깊이 있는 대화를 나눠보는 건 어떨까요?\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"secondary\" onClick={this.handleClose}>\r\n                            Close\r\n                        </Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Test;\r\n","import { Button, Modal } from 'react-bootstrap';\r\nimport React, { Component } from 'react';\r\n\r\n\r\n\r\n\r\nclass ResultModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            show: false,\r\n        }\r\n    }\r\n\r\n    handleClose = () => {\r\n        this.setState({\r\n            show: false,\r\n        });\r\n    }\r\n\r\n    openModal = () => {\r\n        this.setState({\r\n            show: true,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Modal show={this.state.show} onHide={this.handleClose} animation={false}>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>사자</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>사자를 선택한 당신은 자존심이 매우 강한 성격이군요! 다른 사람이 자신을 무시하는 태도를 보이면 화를 참을 수 없고, 다른 사람과 비교를 당하면 쉽게 상처를 받기도 하는 당신. 누군가 당신의 행동을 지적하는 것 같으면 위축되기도 하는데요, 자존심에 상처가 생기는 일과 마주했다면 잠시 분위기를 바꿔보세요. 심리적 안정에 도움이 될 거예요~! ^^</Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"secondary\" onClick={this.handleClose}>\r\n                            Close\r\n                        </Button>\r\n                        <Button variant=\"primary\" onClick={this.handleClose}>\r\n                            Save Changes\r\n                        </Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ResultModal;\r\n","import React, {Component} from 'react';\nimport './App.css';\nimport { Button } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Test from './Test'\n//import { Button } from 'bootstrap';\n\nclass App extends Component {\n  render() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Test />\n      </header>\n      <br></br>\n    </div>\n  );\n}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}